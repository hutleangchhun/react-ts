name: Docker CI/CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: deploy-prod
  cancel-in-progress: true

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/react-app
  CONTAINER_NAME: react-app
  HOST_PORT: 80
  CONTAINER_PORT: 80

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate required secrets
        run: |
          missing=0
          [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] && echo "Missing secret: DOCKERHUB_USERNAME" && missing=1
          [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ] && echo "Missing secret: DOCKERHUB_TOKEN" && missing=1
          [ -z "${{ secrets.VPS_HOST }}" ] && echo "Missing secret: VPS_HOST" && missing=1
          [ -z "${{ secrets.VPS_USER }}" ] && echo "Missing secret: VPS_USER" && missing=1
          [ -z "${{ secrets.VPS_SSH_KEY }}" ] && echo "Missing secret: VPS_SSH_KEY" && missing=1
          if [ "$missing" -eq 1 ]; then
            echo "One or more required secrets are missing."
            exit 1
          fi
          echo "IMAGE_NAME will be: ${{ env.IMAGE_NAME }}"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Node build (precheck)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - run: npm ci --no-audit --no-fund
      - run: npm run build --if-present

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: true # force rebuild so VPS always gets fresh image

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/react-app
      CONTAINER_NAME: react-app
      HOST_PORT: 80
      CONTAINER_PORT: 80
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          envs: DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,IMAGE_NAME,CONTAINER_NAME,HOST_PORT,CONTAINER_PORT,GITHUB_SHA
          script: |
            if [ -n "$DOCKERHUB_USERNAME" ] && [ -n "$DOCKERHUB_TOKEN" ]; then
              echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            fi

            echo "Stopping old containers..."
            docker rm -f $CONTAINER_NAME react-app-container || true

            echo "Pulling latest image..."
            docker pull $IMAGE_NAME:${GITHUB_SHA}

            echo "Starting new container..."
            docker run -d --name $CONTAINER_NAME \
              -p $HOST_PORT:$CONTAINER_PORT \
              --restart unless-stopped \
              $IMAGE_NAME:${GITHUB_SHA}

            echo "Cleaning up..."
            docker image prune -f