name: React App CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/react-app
  CONTAINER_NAME: react-app
  HOST_PORT: 80
  CONTAINER_PORT: 80
  NODE_VERSION: "20"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 1

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate required secrets
        run: |
          missing=0
          [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] && echo "Missing secret: DOCKERHUB_USERNAME" && missing=1
          [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ] && echo "Missing secret: DOCKERHUB_TOKEN" && missing=1
          [ -z "${{ secrets.VPS_HOST }}" ] && echo "Missing secret: VPS_HOST" && missing=1
          [ -z "${{ secrets.VPS_USER }}" ] && echo "Missing secret: VPS_USER" && missing=1
          [ -z "${{ secrets.VPS_SSH_KEY }}" ] && echo "Missing secret: VPS_SSH_KEY" && missing=1
          if [ "$missing" -eq 1 ]; then
            echo "One or more required secrets are missing."
            exit 1
          fi
          echo "IMAGE_NAME will be: ${{ env.IMAGE_NAME }}"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: 
      name: production
      url: http://${{ secrets.VPS_HOST }}
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.1.0
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          timeout: 60s
          command_timeout: 10m
          envs: DOCKERHUB_USERNAME,DOCKERHUB_TOKEN,IMAGE_NAME,CONTAINER_NAME,HOST_PORT,CONTAINER_PORT,GITHUB_SHA
          script: |
            set -e
            
            echo "üîê Logging into Docker Hub..."
            if [ -n "$DOCKERHUB_USERNAME" ] && [ -n "$DOCKERHUB_TOKEN" ]; then
              echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            else
              echo "‚ùå Docker Hub credentials not provided"
              exit 1
            fi

            echo "üõë Stopping existing containers..."
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            echo "üì• Pulling latest image..."
            docker pull $IMAGE_NAME:${GITHUB_SHA}

            echo "üöÄ Starting new container..."
            docker run -d \
              --name $CONTAINER_NAME \
              -p $HOST_PORT:$CONTAINER_PORT \
              --restart unless-stopped \
              --health-cmd="curl -f http://localhost:$CONTAINER_PORT || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              $IMAGE_NAME:${GITHUB_SHA}

            echo "‚è≥ Waiting for container to be healthy..."
            timeout 60s bash -c 'while [[ "$(docker inspect --format="{{.State.Health.Status}}" '$CONTAINER_NAME')" != "healthy" ]]; do sleep 5; done' || {
              echo "‚ùå Container failed to become healthy"
              docker logs $CONTAINER_NAME
              exit 1
            }

            echo "üßπ Cleaning up old images..."
            docker image prune -af --filter "until=24h"
            
            echo "‚úÖ Deployment successful!"
            docker ps --filter "name=$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
